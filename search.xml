<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Typora 图片自动上传与免费图床</title>
      <link href="2021/06/17/2021-06-17-Typora-%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E4%B8%8E%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
      <url>2021/06/17/2021-06-17-Typora-%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E4%B8%8E%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;之前写过一个基于Gitee搭建免费图床的教程，但是每个图片都需要使用Git命令或者使用Git相关的可视化工具进行上传，使用起来并不是很方便。Typora 是当下比较火的一款Markdown写作工具，其图片自动上传功能为更方便的使用图床提供了可能。</p><body><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>&emsp;&emsp;之前的教程里讲述了基于Gitee搭建免费图床的方法，因为一些众所周知的原因，Github的访问速度比较受限，所以当时想到了在Gitee上搭建图床。但是因为需要手动上传每张图片，还无法快捷的获取图片调用链接，操作并不方便，因此更多的还是使用 PicGo + Github 的方式搭建图床。至于 PicGo + Github 搭建图床的教程网上很多，此处不多赘述。但是最近因为电脑重装系统，重新安装和配置了 PicGo， 出现了图片上传失败的问题。不清楚是自己配置有误还是什么其他原因，因此再一次产生了研究 Typora 图片自动上传功能的想法。没错，这并不是我第一次研究这个功能，但是第一次尝试以失败告终，这一次经过一个晚上的反复尝试，终于如愿以偿。因为访问速度的原因，这里仍然以 Gitee 举例说明，该方法同样适用于 Github ，感兴趣的小伙伴可以自己尝试举一反三或与我交流。</p><h1 id="Typora-自动上传功能配置"><a href="#Typora-自动上传功能配置" class="headerlink" title="Typora 自动上传功能配置"></a>Typora 自动上传功能配置</h1><p>  打开 Typora 编辑器，依次选择<code>文件-&gt;偏好设置-&gt;图像</code>，如下图所示进行配置：</p><center><img src=http://gitee.com/hekuzhengfeng/pictures/raw/master/pic/Snipaste_2021-06-17_23-19-53.png></center><p>选择插入图片时上传图片，勾选对本地位置的图片应用上述规则，上传服务选择<code>Custom Command</code>。也可以选择PicGo（app）或者Picgo-Core（command line），但是因为楼主PicGo趴窝了，所以这里选择自定义命令。感兴趣的同学可以尝试下其他选项。</p><p>&emsp;&emsp;这里说明一下自定义命令，命令的含义是调用“D:\picture\pictures\”文件夹下一个名为“giteeupload.bat”的批处理文件，楼主把该批处理文件也放到了图床所用的仓库里。</p><h1 id="创建批处理文件"><a href="#创建批处理文件" class="headerlink" title="创建批处理文件"></a>创建批处理文件</h1><p>&emsp;&emsp;不知道什么是批处理文件的请自行找某度获取答案，创建方式是直接新建文本文件，然后直接改名为 “xx.bat” 即可，需要注意要把文件的扩展名改为“.bat”，电脑设置了不显示扩展名的小伙伴要注意扩展名是否正确。一般情况下修改扩展名会有一个提示是否修改扩展名的弹窗，选择确定即可，如果没看到这个弹窗，大概率是没有修改扩展名。</p><p>&emsp;&emsp;话不多说，上代码：</p><pre><code class="bat">@echo offecho %0set i=0echo Upload Success:::图片调用地址头部set head=http://gitee.com/username/reponame/raw/branchname/path/:loopif [%1]==[] goto endset source=%~f1::echo %source%set name=%~nx1::图床本地仓库存放图片的路径set path=D:\picture\pictures\pic\set aim=%path%%name%copy %source% %aim% &gt;nulset ul=%head%%name%echo %ul%shiftset/a i=%i%+1goto loop:end::下一行中路径改为图床本地仓库的根目录cd /d D:\picture\pictures::后面几行中&quot;C:\Program Files\Git\cmd\git&quot;修改为git.exe的完整路径，注意不要加“”.exe”&quot;C:\Program Files\Git\cmd\git&quot; add .&quot;C:\Program Files\Git\cmd\git&quot; commit -m &quot;add picture(s) %date:~0,10% %time%&quot;&quot;C:\Program Files\Git\cmd\git&quot; push origin master&quot;C:\Program Files\Git\cmd\git&quot; status</code></pre><p>&emsp;&emsp;将上述代码粘贴到刚刚创建的 <code>.bat</code>文件中，根据注释稍作修改即可使用。修改点如下：</p><ol><li><code>set head=http://gitee.com/username/reponame/raw/branchname/path/</code>中，username修改为自己在Gitee的用户名，reponame 修改为图床的仓库名称，branchname 修改为图床在仓库中的分支，通常默认为master，path 修改为图片在图床仓库中的路径，如在根目录下则直接删除“path/”；</li><li><code>set path=D:\picture\pictures\pic\</code>中，将“D:\picture\pictures\pic\” 修改为图床本地仓库中存放图片的路径；</li><li><code>cd /d D:\picture\pictures</code>中，将 “D:\picture\pictures” 修改为图床本地仓库的根目录路径；</li><li>最后几行中 “C:\Program Files\Git\cmd\git” 修改为 “git.exe” 的完整路径，注意本例中 “git.exe” 在 “C:\Program Files\Git\cmd” 路径下；</li><li><code>&quot;C:\Program Files\Git\cmd\git&quot; commit -m &quot;add picture(s) %date:~0,10% %time%&quot;</code>中， “-m” 后面的内容为提交信息，可以自行修改，也可以直接使用。</li></ol><p>最后要注意的是批处理文件的文件名要与 Typora 中自定义命令的配置相对应。</p><h1 id="功能验证"><a href="#功能验证" class="headerlink" title="功能验证"></a>功能验证</h1><p>&emsp;&emsp;至此，Typora 图片自动上传功能已经配置完成，点击 <code>验证图片上传选项</code> 按钮，j经过短暂的运行，如果能成功上传，则会提示“成功上传图片并获得新的URL”，如下图所示：</p><center><img src=http://gitee.com/hekuzhengfeng/pictures/raw/master/pic/Snipaste_2021-06-17_23-57-43.png></center><h1 id="使用自动上传功能"><a href="#使用自动上传功能" class="headerlink" title="使用自动上传功能"></a>使用自动上传功能</h1><p>&emsp;&emsp;需要插入图片时，依次点击<code>格式-&gt;图像-&gt;插入本地图片...</code>然后在弹出窗口中选择想要插入的图片，稍等几秒中，图片就会上传到 Gitee 的服务器中，并以 Markdown 的格式插入服务器上的图片。</p><p>&emsp;&emsp;目前该功能还不适用于插入剪切板中的图片。对于网站的图片是否有效目前也还没有验证，有兴趣的小伙伴可以尝试看看。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>&emsp;&emsp;教程到这里就结束了，希望这篇教程能给小伙伴们带来便利，有疑问的小伙伴欢迎留言讨论，有不足之处也欢迎大家批评指正。</p></body>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread文件系统组件在STM32H743上的应用</title>
      <link href="2021/05/31/RT-Thread%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6%E5%9C%A8STM32H743%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>2021/05/31/RT-Thread%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6%E5%9C%A8STM32H743%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>RT-Thread（后文简称RT）提供的DFS组件、Fatfs组件和SDIO驱动组合起来可用于操作SD卡，但RT的底层驱动目前对STM32H743（后文简称H743）适配不是很好，在stm32h743上移植RT时，包括SDIO在内的多个设备驱动都无法直接编译通过。且当前官方论坛中关于在H743上应用RT的相关的帖子也比较少，因此在本次使用SD卡挂载文件系统时，因为底层驱动不适配，遇到了很多问题，也尝试了很多办法，最后通过<strong>重写块设备部分的代码</strong>实现了文件系统的挂载。</p><body><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>主控芯片：stm32h743iit6</p><p>硬件平台：自行制作的单板</p><p>RT-Thread版本：4.0.2</p><p>开发工具：RT-Thread Studio (Version: 2.0.0)（后文简称RT-Studio）</p><p>​        STM32CubeMX（Version: 6.0.1）</p><p>​        STM32CubeIDE（Version: 1.5.1）</p><p>存储设备：SD卡</p><h1 id="RT虚拟文件系统简介"><a href="#RT虚拟文件系统简介" class="headerlink" title="RT虚拟文件系统简介"></a>RT虚拟文件系统简介</h1><p>详细内容参看<a href="https://www.rt-thread.org/document/site/programming-manual/filesystem/filesystem/#dfs" target="_blank" rel="noopener">RT官方文档</a>。</p><p>RT虚拟文件系统层次架构如下图所示。</p><center><img src="https://raw.githubusercontent.com/hekuzhengfeng/pictures/master/img20200001.png" height = 70% width = 70%/></center><p>DFS是RT提供的虚拟文件系统组件，该组件为应用程序提供方便的文件操作接口，并支持多种文件系统和存储设备。本文采用的文件系统是FatFS，主要是因为FatFS可以兼容微软的FAT格式，基于该文件系统将文件写入到SD卡后，SD内容可以直接被windows系统识别。</p><p>由于底层驱动不适配的问题，本文基于ST的HAL库重写了块设备相关代码，最终实现了文件系统的功能。</p><h1 id="基于RT-Studio的配置"><a href="#基于RT-Studio的配置" class="headerlink" title="基于RT-Studio的配置"></a>基于RT-Studio的配置</h1><p>在RT-Studio中新建工程及其他功能的实现此处不再详述，首先介配置DFS组件和FatFS组件。如下图所示：</p><center><img src="https://raw.githubusercontent.com/hekuzhengfeng/pictures/master/img20210225155935.png" height=70% width=70%/></center><p>点亮DFS组件和Fatfs组件。可能需要libc组件的支持，这点没有做过验证。其他组件与文件系统本身无关，此处不详细介绍。</p><center><img src="https://raw.githubusercontent.com/hekuzhengfeng/pictures/master/img20210225160534.png" height=70% width=70%/></center><p>按上图所示进行配置，DFS可以加载多种文件系统，但此处只使用了FatFs文件系统。</p><h1 id="重写块设备相关代码"><a href="#重写块设备相关代码" class="headerlink" title="重写块设备相关代码"></a>重写块设备相关代码</h1><h2 id="重写块设备代码的原因"><a href="#重写块设备代码的原因" class="headerlink" title="重写块设备代码的原因"></a>重写块设备代码的原因</h2><p>之所以要重新块设备相关代码，主要原因有二：一个是本文已经反复提到的底层驱动不适配的问题，另一个是RT原有的SD Card设备类<code>mcsd_blk_device</code>较为复杂，包含了多个子类，需要研究多个类型及相关函数才能完成实例化，比较困难。</p><p><code>mcsd_blk_device</code>的定义如下：</p><pre><code class="c">struct mmcsd_blk_device{    struct rt_mmcsd_card *card;    rt_list_t list;    struct rt_device dev;    struct dfs_partition part;    struct rt_device_blk_geometry geometry;    rt_size_t max_req_size;};</code></pre><h2 id="生成SDMMC初始化代码"><a href="#生成SDMMC初始化代码" class="headerlink" title="生成SDMMC初始化代码"></a>生成SDMMC初始化代码</h2><p>使用STM32CubeMX创建项目，配置SDMMC1为SD 4 bit Wide bus模式。配置如下图：</p><center><img src="https://raw.githubusercontent.com/hekuzhengfeng/pictures/master/img20210225171354.png" height=70% width=70%/>    </center><p>时钟配置此处不做展示，项目中时钟源选择PLL1Q，频率为400MHz。配置完成后生成代码备用。</p><h2 id="在RT中初始化并注册块设备"><a href="#在RT中初始化并注册块设备" class="headerlink" title="在RT中初始化并注册块设备"></a>在RT中初始化并注册块设备</h2><pre><code class="c">struct rt_device{    struct rt_object          parent;                   /**&lt; inherit from rt_object */    enum rt_device_class_type type;                     /**&lt; device type */    rt_uint16_t               flag;                     /**&lt; device flag */    rt_uint16_t               open_flag;                /**&lt; device open flag */    rt_uint8_t                ref_count;                /**&lt; reference count */    rt_uint8_t                device_id;                /**&lt; 0 - 255 */    /* device call back */    rt_err_t (*rx_indicate)(rt_device_t dev, rt_size_t size);    rt_err_t (*tx_complete)(rt_device_t dev, void *buffer);#ifdef RT_USING_DEVICE_OPS    const struct rt_device_ops *ops;#else    /* common device interface */    rt_err_t  (*init)   (rt_device_t dev);    rt_err_t  (*open)   (rt_device_t dev, rt_uint16_t oflag);    rt_err_t  (*close)  (rt_device_t dev);    rt_size_t (*read)   (rt_device_t dev, rt_off_t pos, void *buffer, rt_size_t size);    rt_size_t (*write)  (rt_device_t dev, rt_off_t pos, const void *buffer, rt_size_t size);    rt_err_t  (*control)(rt_device_t dev, int cmd, void *args);#endif#if defined(RT_USING_POSIX)    const struct dfs_file_ops *fops;    struct rt_wqueue wait_queue;#endif    void                     *user_data;                /**&lt; device private data */};</code></pre><p>块设备的类型定义如上，其中<code>RT_USING_DEVICE_OPS</code>和<code>RT_USING_POSIX</code>未被定义。</p><p>下文是初始化和注册块设备的代码。首先创建块设备<code>device_sd0</code>，然后初始<code>device_sd0</code>的几个成员函数，初始化MCU的SDMMC1外设并将块设备注册到系统中。</p><pre><code class="c">int sdInit(void){    rt_device_t device_sd0;    SD_HandleTypeDef *hsd1;    //创建一个系统块设备对象    device_sd0 = rt_device_create(RT_Device_Class_Block, sizeof(SD_HandleTypeDef));    //手动设置块设备对象的函数指针    device_sd0-&gt;init = sdmmcInit;//初始化函数指针    device_sd0-&gt;open = sdmmcOpen;    device_sd0-&gt;close = sdmmcClose;    device_sd0-&gt;read = sdmmcRead;    device_sd0-&gt;write = sdmmcWrite;    device_sd0-&gt;control = sdmmcControl;    //将SDMMC1的控制块存定义到块设备的user data中    device_sd0-&gt;user_data = &amp;(device_sd0-&gt;user_data) + 1;    hsd1 = (SD_HandleTypeDef *)device_sd0-&gt;user_data;    rt_memset(hsd1, 0, sizeof(SD_HandleTypeDef));    //将device_sd0注册到系统中，设备名为sd0    rt_device_register(device_sd0, &quot;sd0&quot;, RT_DEVICE_FLAG_RDWR);    //初始化SDMMC1    hsd1-&gt;Instance = SDMMC1;    hsd1-&gt;Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;    hsd1-&gt;Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;    hsd1-&gt;Init.BusWide = SDMMC_BUS_WIDE_4B;    hsd1-&gt;Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;    hsd1-&gt;Init.ClockDiv = 8;    if (HAL_SD_Init(hsd1) != HAL_OK)    {        return RT_ERROR;    }    return RT_EOK;}//注册初始化函数，参考官方文档自动初始化相关内容INIT_DEVICE_EXPORT(sdInit);</code></pre><p>使用HAL库初始化外设需要一个控制块（即<code>SD_HandleTypeDef</code>类型的一个实例），在创建块设备对象时，已预留了空间用于存储控制块。其原理如下：</p><ol><li>函数<code>rt_device_create</code>中有为块设备申请内存的操作，计算所需内存大小时在块设备类型的基础上增加了作为参数传入的SDMMC1控制块所需的内存大小；</li><li>将块设备最后一个成员<code>void * user_data</code>指向预留的空间，及<code>user_data</code>的下一个地址；</li><li>将指针<code>hsd1</code>也指向预留的空间（方便操作）；</li><li>此时已完成将SDMMC1控制块定义到块设备user data中的操作。</li></ol><p>初始化外设SDMMC1的代码可直接从上文STM32CubeMX生成的代码中拷贝。此处有几个细节需要注意：</p><ol><li>原来代码中是直接定义了一个SDMMC控制块对象，而在本项目中使用的是指向SDMMC控制块的指针，在调用控制块成员和函数传参时语法不同；</li><li>原来代码中初始化函数<code>HAL_SD_init</code>返回失败时进入一个错误处理函数（默认为死循环），而本项目中改为返回<code>RT_ERROR</code>；</li><li>生成的代码中还有一个函数<code>HAL_SD_MspInit</code>也需要拷贝过来，改函数不需要任何更改，此处不再贴出代码。</li></ol><p>块设备的几个成员函数定义如下，这些函数是文件系统与SD卡之间的桥梁。定义这几个函数的过程比较曲折，画了很多功夫才搞明白每一个函数应该实现什么样的功能，以及函数入参、返回值的意义。但函数的内容并不复杂，此处直接列出源码，不再详细解释。</p><pre><code class="c">rt_err_t sdmmcInit(rt_device_t dev){    return RT_EOK;}rt_err_t sdmmcOpen(rt_device_t dev, rt_uint16_t oflag){    return RT_EOK;}rt_err_t sdmmcClose(rt_device_t dev){    return RT_EOK;}rt_size_t sdmmcRead(rt_device_t dev, rt_off_t pos, void *buffer, rt_size_t size){    if (HAL_SD_ReadBlocks((SD_HandleTypeDef *)dev-&gt;user_data, (uint8_t *)buffer, pos, size, 5000) != HAL_OK)    {        return 0;    }    return size;}rt_size_t sdmmcWrite(rt_device_t dev, rt_off_t pos, const void *buffer, rt_size_t size){    if (HAL_SD_WriteBlocks((SD_HandleTypeDef *)dev-&gt;user_data, (uint8_t *)buffer, pos, size, 5000) != HAL_OK)    {        return 0;    }    return size;}rt_err_t sdmmcControl(rt_device_t dev, int cmd, void *args){    struct rt_device_blk_geometry info;    switch (cmd)    {    case RT_DEVICE_CTRL_BLK_GETGEOME:        info.sector_count = ((SD_HandleTypeDef *)dev-&gt;user_data)-&gt;SdCard.LogBlockNbr;        info.bytes_per_sector = ((SD_HandleTypeDef *)dev-&gt;user_data)-&gt;SdCard.LogBlockSize;        info.block_size = ((SD_HandleTypeDef *)dev-&gt;user_data)-&gt;SdCard.LogBlockSize;        rt_memcpy(args, &amp;info, sizeof(struct rt_device_blk_geometry));        break;    default:        break;    }    return RT_EOK;}</code></pre><h2 id="将块设备挂载到文件系统"><a href="#将块设备挂载到文件系统" class="headerlink" title="将块设备挂载到文件系统"></a>将块设备挂载到文件系统</h2><p>经过一番努力，现在已经在系统中注册了块设备”sd0”，DFS组件和FatFS组件会自动初始化，接下来需要将块设备挂载到文件系统中。函数如下：</p><pre><code class="c">int sd_mount(void){    if(rt_device_find(&quot;sd0&quot;) != RT_NULL)    {        if (dfs_mount(&quot;sd0&quot;, &quot;/&quot;, &quot;elm&quot;, 0, 0) == RT_EOK)        {            LOG_I(&quot;sd card mount to &#39;/&#39;&quot;);            return RT_EOK;        }        else        {            LOG_W(&quot;sd card mount to &#39;/&#39; failed!&quot;);        }    }    return RT_ERROR;}INIT_APP_EXPORT(sd_mount);</code></pre><p>更好的挂载文件系统的操作可以参考帖子<a href="https://blog.csdn.net/sinat_31039061/article/details/104145805" target="_blank" rel="noopener">RT-Thread进阶笔记之虚拟文件系统</a>中6.6.4小节的方法创建一个挂载文件系统的线程。本项目中实际上是偷了个懒，挂载文件系统的操作只会尝试一次，因此必须等到DFS、FatFS、块设备都初始化完成后调用该函数才能成功挂载文件系统，所以把该函数注册到自动初始化最晚的“application init functions”中，具体参考官方文档相关章节。</p><h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><p>需要注意的是，在初始化系统时钟时，一定要配置外设SDMMC1的时钟，具体方法这里也不再详细说明。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本项目不仅完成了RT-Thread文件系统组件在stm32h743上的应用，实际上也为RT-Thread其他设备驱动不适配stm32h743的问题提供了一个解决问题的思路。</p><p>由于本人能力有限，代码中可能存在诸多问题或bug，欢迎大家批评指正。</p></body>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32h743 </tag>
            
            <tag> stm32 </tag>
            
            <tag> SD Card </tag>
            
            <tag> RT-Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Database-Library管理Altium-Designer库文件</title>
      <link href="2020/09/14/%E5%9F%BA%E4%BA%8EDatabase-Library%E7%AE%A1%E7%90%86Altium-Designer%E5%BA%93%E6%96%87%E4%BB%B6/"/>
      <url>2020/09/14/%E5%9F%BA%E4%BA%8EDatabase-Library%E7%AE%A1%E7%90%86Altium-Designer%E5%BA%93%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<body><h1 id="基于Database-Library"><a href="#基于Database-Library" class="headerlink" title="基于Database-Library"></a>基于Database-Library</h1><h1 id="管理Altium-Designer库文件"><a href="#管理Altium-Designer库文件" class="headerlink" title="管理Altium-Designer库文件"></a>管理Altium-Designer库文件</h1><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>&emsp;&emsp;Altium Designer（以下简称AD）是一个常用的PCB设计软件，其原件库包含的文件格式主要包含.LibPkg（库工程）、.PcbLib（封装库）、.SchLib（符号库）和.IntLib（集成库）四种。</p><p>&emsp;&emsp;Git 是一款强大的版本管理工具，在版本管理和团队合作中应用git能带来极大的效率提升。</p><p>&emsp;&emsp;然而，AD原件库所需的四种文件均为二进制文件，而git无法对二进制文件进行merge等操作，在团队合作中，维护原件库十分困难。虽然Altium提供了相关的工具对原件进行管理，但是价格昂贵。经过多次尝试，终于找到一种能在git仓库中较为方便的管理AD原件库的形式——Database Library。</p><p>&emsp;&emsp;Database library是另外一种原件库的组织形式，在Database Library中，每一个原理图符号或封装，都对应一个独立的.SchLib或.PcbLib文件，通过数据库文件或excel表格记录原理图符号和封装的对应关系。虽然符号库和封装库文件仍然是二进制文件，但在库中新增器件的操作体现为新增符号库文件、新增封装库文件和修改excel文件。虽然.xlsx文件也是二进制文件，但在DAtabase Library中，.xlsx文件可以另存为.csv文件而不丢失信息，.csv文件本质上是文本文件，不影响git的使用。</p><p>&emsp;&emsp;综上所述，改用 Database Library 可以方便原件库的管理，有效提高研发效率。</p><h2 id="二、Database-Library-的安装"><a href="#二、Database-Library-的安装" class="headerlink" title="二、Database Library 的安装"></a>二、Database Library 的安装</h2><p>&emsp;&emsp;如下图所示是一个Database Library的示例：</p><p><img src="https://gitee.com/hekuzhengfeng/pictures/raw/master/pic/Snipaste_2020-07-08_23-30-51.png" alt=""></p><p>其中”FootPrints”文件夹下为封装库文件，”Symbols”文件夹下为符号库文件，”History”文件夹是AD的历史文件，由AD自动生成。<strong>符号库文件夹和封装库文件夹的区分是为了方便管理，并非Database Library本身的强制要求。</strong>“.xlsx”和”.csv”文件包含了符号库与封装库的对应信息。<strong>Database Library从.xlsx文件中获取符号库和封装库的对应信息，.csv文件内容与.xlsx文件相同，但.csv是文本格式的文件，Git下可以进行merge操作，尤其是涉及到多人合作时，给版本管理带来很大便利。需要基于Git进行版本管理时，只需跟踪.csv文件，在需要时将.csv文件另存为.xlsx格式即可。</strong>“.DbLib”文件即为AD 的 Database Library文件。</p><p>&emsp;&emsp;用记事本(notepad++)方式打开”.DbLib”文件，文件内容如下图：</p><p><img src="http://192.168.0.114/huangqingbo/pictures/raw/master/img/Snipaste_2020-07-08_23-47-56.png" alt=""></p><p><img src="http://192.168.0.114/huangqingbo/pictures/raw/master/img/Snipaste_2020-07-08_23-53-14.png" alt=""></p><p>如图所示，根据仓库在本地的实际存储路径，对”.DbLib”文件进行修改，修改后保存并关闭文件。</p><p>&emsp;&emsp;此时Database Library已经准别就绪，可以在AD中安装并使用了。安装流程及器件调用与其他元件库安装流程相同，选择从文件安装然后找到对应的”.DbLib”文件安装即可。</p><h2 id="三、-Database-Library的使用"><a href="#三、-Database-Library的使用" class="headerlink" title="三、 Database Library的使用"></a>三、 Database Library的使用</h2><p>&emsp;&emsp;Database Library库中的元件条用方式与常用的原理图库、集成库等条用方式基本相同，但需要额外注意多part器件的调用。</p><p>&emsp;&emsp;在传统的原理图库或集成库（以集成库为例）中，调用多part器件，在Librarys窗口中，会以树状图的形式展现出器件有多少个part（如下图所示，点击器件前的小三角即可展开或折叠器件part），直接拖动所需part到原理图中即可。</p><p><img src="https://gitee.com/hekuzhengfeng/pictures/raw/master/pic/Snipaste_2020-07-25_22-54-33.png" alt=""></p><p>&emsp;&emsp;而Database Library不会像传统一样特殊显示多part器件（如下图红框中的器件，是多part器件，但与非多part器件并无区别）。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></body><p>&emsp;&emsp;Altium Designer（以下简称AD）是一个常用且简单易上手的PCB设计软件，使用Database-Library作为AD的原件库，可以在一定程度上克服Git不支持二进制文件的弊端，更加方便地进行版本管理。</p>]]></content>
      
      
      <categories>
          
          <category> Altium Designer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> Altium designer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Gitee搭建免费图床</title>
      <link href="2020/04/25/%E5%9F%BA%E4%BA%8EGitee%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
      <url>2020/04/25/%E5%9F%BA%E4%BA%8EGitee%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>本文简单介绍如何基于Gitee搭建免费图床。</p><body><h1 id="基于Gitee搭建免费图床"><a href="#基于Gitee搭建免费图床" class="headerlink" title="基于Gitee搭建免费图床"></a>基于Gitee搭建免费图床</h1><h2 id="1、为什么要基于Gitee搭建免费图床"><a href="#1、为什么要基于Gitee搭建免费图床" class="headerlink" title="1、为什么要基于Gitee搭建免费图床"></a>1、为什么要基于Gitee搭建免费图床</h2><p>​        简单讲，主要是因为大家熟悉的免费图床各有不足之处。例如：七牛云回收了测试域名，配置自定义域名需要绑定主机（<a href="https://www.cnblogs.com/aflyun/p/10010319.html" target="_blank" rel="noopener">参考：【教程】使用gitee搭建免费图床</a>）；基于 GitHub 的图床访问速度则是硬伤，经常遇到图片加载不出来的问题。</p><h2 id="2、准备工作"><a href="#2、准备工作" class="headerlink" title="2、准备工作"></a>2、准备工作</h2><p>1、一个Gitee账户</p><p>2、配置好SSH</p><p>3、准备好Git环境</p><h2 id="3、搭建图床"><a href="#3、搭建图床" class="headerlink" title="3、搭建图床"></a>3、搭建图床</h2><p>1、在Gitee上新建一个仓库</p><p>​        该步骤是Gitee的常规操作，不再详细介绍，<strong>注意要创建一个公开仓库。</strong></p><p>2、上传图片</p><p>​        使用git将仓库克隆到本地，在仓库中加入需要保存到图床的图片，然后push到Gitee即可。该步骤是Git的常规操作，也不再详细介绍。</p><p>3、使用markdown语法调用图片</p><p>​    调用图片的地址格式如下表所示：</p><style>table th:first-of-type {    width: 50%;}table th:nth-of-type(2) {    width: 15%;}table th:nth-of-type(3) {    width: 15%;}table th:nth-of-type(4) {    width: 20%;}</style><table><thead><tr><th align="center">仓库地址</th><th align="center">固定格式</th><th align="center">分支名</th><th align="center">路径及文件名</th></tr></thead><tbody><tr><td align="center">http：//gitee.com/hekuzhengfeng/pictures/</td><td align="center">raw/</td><td align="center">master/</td><td align="center">pic/hekuzhengfeng.png</td></tr></tbody></table><p>​        如下示例，图片存放在pictures仓库中，master分支下的pic文件夹下，图片文件名为test.png，调用图片的地址为：<a href="http://gitee.com/hekuzhengfeng/pictures/raw/master/pic/hekuzhengfeng.png" target="_blank" rel="noopener">http://gitee.com/hekuzhengfeng/pictures/raw/master/pic/hekuzhengfeng.png</a></p><p><cneter><img src="http://gitee.com/hekuzhengfeng/pictures/raw/master/pic/hekuzhengfeng.png" /></center></p><p>​        </p><h2 id="4、为什么有这篇教程"><a href="#4、为什么有这篇教程" class="headerlink" title="4、为什么有这篇教程"></a>4、为什么有这篇教程</h2><p>​        第一节中已经链接了一篇基于gitee搭建图床的教程，但是链接中的教程使用了gitee的Pages服务，这样可以搭建一个可视化的图床，但实测每次添加图片（或者其他操作如更改图片名称等）均需要重新进行部署（不排除自己操作有问题）。Gitee Pages可以在提交（push）后自动部署，但该功能需要付费。而本文种介绍的方法则直接push后即可调用图片，无须手动重新部署。</p></body>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Source Insight 搭建Python 环境</title>
      <link href="2020/04/07/Source%20Insight%20%E6%90%AD%E5%BB%BAPython%20%E7%8E%AF%E5%A2%83/"/>
      <url>2020/04/07/Source%20Insight%20%E6%90%AD%E5%BB%BAPython%20%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Source-Insight-搭建Python-环境"><a href="#Source-Insight-搭建Python-环境" class="headerlink" title="Source Insight 搭建Python 环境"></a>Source Insight 搭建Python 环境</h1><p>SI是一个受到广泛欢迎的代码阅读/编辑器，那么能不能用SI来进行python开发呢，经过一晚上的试验，终于实现了这一功能。</p><body><h1 id="1-python的语法高亮"><a href="#1-python的语法高亮" class="headerlink" title="1.python的语法高亮"></a>1.python的语法高亮</h1><p>source insight 4.0版本已经默认支持python语言的语法高亮，无须另外设置<br>当然可以自行设置主题、字体大小等以符合个人阅读编辑习惯<br>代码编辑区默认显示字符间距很小，不方便阅读，可以尝试按ctrl+F12进行调整</p><p>#2.source insight直接运行python脚本</p><p>操作系统： windows 10<br>python版本： 3.7<br>操作方法如下：<br><img src = "https://raw.githubusercontent.com/hekuzhengfeng/pictures/master/img/20191130230849.png" height = 50% width = 50%/></p><p><strong>在SI中选择tools-&gt;custom commands</strong></p><img src = "https://raw.githubusercontent.com/hekuzhengfeng/pictures/master/img/20191130231129.png" height = 50% width = 50%/><p><strong>add新的命令，设置命令名（例如python)，点击OK</strong><br><strong>然后编辑上一步创建地命令</strong>（此处为py）<br><img src = "https://raw.githubusercontent.com/hekuzhengfeng/pictures/master/img/20191130231903.png" height = 50% width = 50%/><br><strong>其中run 填“python %n;pause”（不包含引号）</strong><br><strong>dir为空</strong><br><strong>勾选Save Files Firs</strong></p><p>此时点击Run即可直接运行python脚本，<strong>还可以点击”Keys”添加快捷键，或者点击”Menu”将命令添加到tools菜单下</strong></p><p>最后祝大家顺利的用Source Insight搭建python环境</p></body>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> source insight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git相关命令记录</title>
      <link href="2020/03/25/git%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
      <url>2020/03/25/git%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="git相关命令记录"><a href="#git相关命令记录" class="headerlink" title="git相关命令记录"></a>git相关命令记录</h1><body><h2 id="SSH-KEY"><a href="#SSH-KEY" class="headerlink" title="SSH_KEY"></a>SSH_KEY</h2><pre><code class="git">ssh-keygen -t rsa -C &quot;your_email@email.com&quot; -f ~/.ssh/custom_rsa</code></pre><p>##git常用命令</p><pre><code class="git">git clonegit pullgit initgit fetch</code></pre><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><pre><code class="git">#查看本地+远程所有分支的全部提交以及关系git log --graph --all#查看本地+远程所有分支的全部提交以及关系gitk --all</code></pre><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><pre><code class="git">#删除远程仓库origin上的分支testgit push origin --delete test</code></pre><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><pre><code class="git">#创建切换一个空分支，但工作区所有文件保持不变git checkout --orphan latest_branch#撤回还未add的文件修改git checkout .</code></pre><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><pre><code class="git">#解决git status无法显示中文问题git config --global core.quotepath false</code></pre></body>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
