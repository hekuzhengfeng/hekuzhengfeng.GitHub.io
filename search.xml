<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于STM32CubeIDE实现编译版本号自动升级功能</title>
      <link href="2021/12/24/%E5%9F%BA%E4%BA%8ESTM32CubeIDE%E5%AE%9E%E7%8E%B0%E7%BC%96%E8%AF%91%E7%89%88%E6%9C%AC%E5%8F%B7%E8%87%AA%E5%8A%A8%E5%8D%87%E7%BA%A7%E5%8A%9F%E8%83%BD/"/>
      <url>2021/12/24/%E5%9F%BA%E4%BA%8ESTM32CubeIDE%E5%AE%9E%E7%8E%B0%E7%BC%96%E8%AF%91%E7%89%88%E6%9C%AC%E5%8F%B7%E8%87%AA%E5%8A%A8%E5%8D%87%E7%BA%A7%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<body><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1></body><p>&emsp;&emsp;软件的版本号通常包含主版本号、子版本号、修正版本号和编译版本号，本文介绍基于STM32CubeIDE实现编译版本号自动升级的方法，即每次编译程序都自动将编译版本号加1。</p><body><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>&emsp;&emsp;在C语言代码中，版本号可以通过宏定义实现，可以直接定义完整的版本号，也可以将版本号的几个部分分开定义，通过更改宏定义的方式即可更改程序版本号。实现自动升级编译版本号的原理，就是将版本号的几个部分分开定义并单独放置到一个头文件中，每次编译程序之前，先调用一个文本处理工具，该文本处理工具读取版本号所在的头文件，识别编译版本号并将编译版本号加1，然后将修改后的内容回写到头文件中，最后对源代码进行编译链接。</p><h1 id="具体实现方法"><a href="#具体实现方法" class="headerlink" title="具体实现方法"></a>具体实现方法</h1><h2 id="文本处理工具"><a href="#文本处理工具" class="headerlink" title="文本处理工具"></a>文本处理工具</h2><p>&emsp;&emsp;要实现自动升级编译版本号的功能，首先需要一个文本处理工具，该工具需要高度定制化的功能，即读取头文件、识别并修改编译版本号。作为程序猿，大家不妨自己动手code一个文本处理工具，当然也可以直接点击链接下载现成的<a href="https://download.csdn.net/download/qq_34156419/70148038" target="_blank" rel="noopener">专用文本处理工具</a>。</p><h2 id="编译版本号的宏定义"><a href="#编译版本号的宏定义" class="headerlink" title="编译版本号的宏定义"></a>编译版本号的宏定义</h2><p>&emsp;&emsp;如果大家使用自己制作的文本处理工具，宏定义能满足各自的文本处理工具的识别、修改要求即可。</p><p>&emsp;&emsp;如果大家下载了现成的文本处理工具，则必须按照<code>#define BUILD_NUMBER        6</code>的格式进行宏定义，注意样例中6是版本号，是文本处理工具要修改的部分，其他部分是文本处理工具识别编译版本号的格式依据，版本号可以自行预设任意的自然数，其他部分则必须与样例保持一致。</p><h2 id="自动调用文本处理工具"><a href="#自动调用文本处理工具" class="headerlink" title="自动调用文本处理工具"></a>自动调用文本处理工具</h2><p>&emsp;&emsp;最后一步就是设置好每次编译代码之前自动调用该文本处理工具。</p><p>&emsp;&emsp;首先将下载好的文本处理工具放到工程文件夹下的“Debug”目录下，注意改目录下是否有makefile，如果没有，应找到makefile并将文本处理工具与makefile放置在同已文件夹下。然后依次点击Project -&gt; Properties -&gt; C/C++ Build -&gt; Settings -&gt; Build Steps，在 Pre-build steps中的Command 中输入“autoVersion.exe ../Inc/version.h”，如下图所示。其中“autoVersion.exe”是文本处理工具的文件名，“../Inc/version.h”是编译版本号所在的头文件相对于文本处理工具的相对路径，也可以用该头文件的绝对路径。然后保存配置即可。</p><center><img src="http://gitee.com/hekuzhengfeng/pictures/raw/master/pic/Snipaste_2021-12-24_21-20-11.png"></center><h2 id="验证功能"><a href="#验证功能" class="headerlink" title="验证功能"></a>验证功能</h2><p>&emsp;&emsp;编译程序，观察控制台输出，如下图所示是正常的运行结果。</p><center><img src="http://gitee.com/hekuzhengfeng/pictures/raw/master/pic/Snipaste_2021-12-24_21-29-34.png")></center><p>&emsp;&emsp;编译完成后，观察宏定义是否改变。</p><h2 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h2><p>&emsp;&emsp;<strong>建议关闭下载程序前自动编译的功能。</strong></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>&emsp;&emsp;本文介绍了基于STM32CubeIDE实现自动升级编译版本号的方法，其他集成编译环境如RT-Thread Studio等，可能也可以实现该功能，大家可以自行探索。</p></body>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32 </tag>
            
            <tag> STM32CubeIDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP报文基础及其在Lwip的实现</title>
      <link href="2021/08/20/IP%E6%8A%A5%E6%96%87%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%85%B6%E5%9C%A8Lwip%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2021/08/20/IP%E6%8A%A5%E6%96%87%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%85%B6%E5%9C%A8Lwip%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;本文主要介绍IP数据报的格式，以及IP相关功能在Lwip中的实现方式，希望能对同样在学习Lwip的小伙伴们有所帮助。</p><body><h1 id="1-IP的背景"><a href="#1-IP的背景" class="headerlink" title="1. IP的背景"></a>1. IP的背景</h1><p>&emsp;&emsp;IP协议是TCP/IP协议中最为核心的协议，所有的TCP、UDP、ICMP及IGMP数据都已IP数据报格式传输。IP协议在 TCP/IP协议族的分层中属于网络层，不难理解，IP的主要作用有两个：其一是对上层协议<sup>[1]</sup>的数据进行封装（增加IP首部），然后交给链路层协议进行发送；其二是对链路层接收到的数据进行解析，并根据解析结果将数据交给对应的上层协议进行处理。</p><h1 id="2-IP基础知识介绍"><a href="#2-IP基础知识介绍" class="headerlink" title="2. IP基础知识介绍"></a>2. IP基础知识介绍</h1><h2 id="2-1-IP数据报的格式"><a href="#2-1-IP数据报的格式" class="headerlink" title="2.1 IP数据报的格式"></a>2.1 IP数据报的格式</h2><p>&emsp;&emsp;IP数据报的格式主要包含IP首部和数据，通常情况下，IP首部的长度为20字节（含有选项字段的除外），具体如下图所示：</p><center><img src="http://gitee.com/hekuzhengfeng/pictures/raw/master/pic/image-20210802005825369-16278371212541.png" alt=IP数据报格式></center><h3 id="2-1-1-版本"><a href="#2-1-1-版本" class="headerlink" title="2.1.1 版本"></a>2.1.1 版本</h3><p>&emsp;&emsp;协议版本号，当前普遍应用的IP协议版本号是4，因此也常称为IPv4。</p><h3 id="2-1-2-首部长度"><a href="#2-1-2-首部长度" class="headerlink" title="2.1.2 首部长度"></a>2.1.2 首部长度</h3><p>&emsp;&emsp;首部长度即IP首部所占用的32bit字的数目。因为首部长度是一个4bit段，其最大值是15，也就意味着IP首部的最大长度是60字节。</p><h3 id="2-1-3-服务类型（TOS）"><a href="#2-1-3-服务类型（TOS）" class="headerlink" title="2.1.3 服务类型（TOS）"></a>2.1.3 服务类型（TOS）</h3><p>&emsp;&emsp;服务类型字段长8位，最初的TOS字段中最高3位表示优先权，随后的4位表示服务类型，最后一位保留，恒设置为0。</p><p>&emsp;&emsp;当前的服务类型字段已经作为区分服务（Diffserv）架构的一部分被重新定义了，重定义的服务类型字段中前6位构成了区分代码点（DiffServ Code Point, DSCP），后2位用于显示拥塞通知（Explicit Congestion Notification, ECN）。这两个概念不是很易懂，在Lwip中，该字段由上层协议设定，经过在windows系统下的随机抓包发现，该字段通常设置位0x00，因此对该字段不再深究。</p><h3 id="2-1-4-总长度"><a href="#2-1-4-总长度" class="headerlink" title="2.1.4 总长度"></a>2.1.4 总长度</h3><p>&emsp;&emsp;总长度即整个IP数据报的长度，单位是字节。因为总长度是一个16位字段，其最大值是65535，所以IP数据报的最大长度位65535字节。利用总长度和首部长度两个字段就可以知道IP数据报中数据的起始位置和长度。</p><blockquote><p>注意总长度和首部长度的单位不同，总长度的单位是字节，而首部长度的单位是32位字。</p></blockquote><h3 id="2-1-5-标识"><a href="#2-1-5-标识" class="headerlink" title="2.1.5 标识"></a>2.1.5 标识</h3><p>&emsp;&emsp;标识字段唯一的标识发送的每一份数据报，通常每发送一份报文它的值就会加1。在Lwip的源文件”ip4.c”中，定义了一个变量<code>static u16_t ip_id</code>用于记录IP数据报的唯一标识，其初始值为0，每次发送IP数据报时都将该变量的值填入IP首部的标识字段中，然后将该变量+1。</p><h3 id="2-1-6-标志"><a href="#2-1-6-标志" class="headerlink" title="2.1.6 标志"></a>2.1.6 标志</h3><p>&emsp;&emsp;标志字段共有3位，其中第1位没有使用。第2位是不分段（DF）位，置1表示路由器不能对数据进行分段处理，如果数据包由于不能被分段而未能被转发，则路由器会丢弃该数据包并向源点发送错误消息。第三位是还有更多分段（MF）位，即表示数据还有其他的分段，当路由器对数据包进行分段时，除最后一个分段外，其他所有的分段MF位都应置1，以便接收端直到接收到MF位为0的分段为止。</p><h3 id="2-1-7-生存时间（TTL）"><a href="#2-1-7-生存时间（TTL）" class="headerlink" title="2.1.7 生存时间（TTL）"></a>2.1.7 生存时间（TTL）</h3><p>&emsp;&emsp;生存时间反应了从源IP到目的IP经过的路由器数量即跳数。在最初创建IP数据报时，TTL被设置为一个特定的值，通常是32或者64，数据报每经过一个路由器，该路由器就将TTL减1，因此可以通过TTL的值推算IP数据报经过的跳数。</p><h3 id="2-1-8-协议"><a href="#2-1-8-协议" class="headerlink" title="2.1.8 协议"></a>2.1.8 协议</h3><p>&emsp;&emsp;协议字段给出了IP协议上层协议的协议号，当前已分配的协议号有100多个，下表列出了一些常见的协议号，更多的协议号可以自百度。</p><table><thead><tr><th>协议号</th><th>协议</th></tr></thead><tbody><tr><td>1</td><td>Internet消息控制协议（ICMP）</td></tr><tr><td>2</td><td>Internet组管理协议（IGMP）</td></tr><tr><td>4</td><td>被IP协议封装的IP</td></tr><tr><td>6</td><td>传输控制协议（TCP）</td></tr><tr><td>17</td><td>用户数据报协议（UDP）</td></tr></tbody></table><h3 id="2-1-9-首部检验和"><a href="#2-1-9-首部检验和" class="headerlink" title="2.1.9 首部检验和"></a>2.1.9 首部检验和</h3><p>&emsp;&emsp;首部检验和是针对IP首部的纠错字段，检验和不计算被封装的数据。检验和的计算方法和验证方法将在后文的代码分析部分进行介绍。</p><h3 id="2-1-10-源地址和目的地址"><a href="#2-1-10-源地址和目的地址" class="headerlink" title="2.1.10 源地址和目的地址"></a>2.1.10 源地址和目的地址</h3><p>&emsp;&emsp;顾名思义，指IP数据报的来源和目的IP地址，我们平时常见的IP地址如“192.168.0.1”是IP地址的点分十进制表示方法，是方便人读写和记忆的，IP地址对于电子设备来说是一个32位的二进制数。</p><h3 id="2-1-11-可选项"><a href="#2-1-11-可选项" class="headerlink" title="2.1.11 可选项"></a>2.1.11 可选项</h3><p>&emsp;&emsp;首先，可选项不是所有IP数据报都有的，可选项可以包含源点产生的信息和路由器产生的信息；其次，可选项的长度必须是32位的整数倍，最长长度是40个字节，这一点从首部长度的定义也可以看得出来，如果长度不是32位的整数倍，可以在结尾补0以满足要求。</p><p>&emsp;&emsp;常用的可选项有安全和处理限制（常用于军事领域）、记录路径、时间戳、宽松的源站选路、严格的源站选路。因为使用频率很低而且并非所有的主机和路由器都支持这些可选项，此处不再详细叙述，感兴趣的小伙伴可以自行查阅资料进行了解。</p><h2 id="2-2-IP地址基础知识"><a href="#2-2-IP地址基础知识" class="headerlink" title="2.2 IP地址基础知识"></a>2.2 IP地址基础知识</h2><p>&emsp;&emsp;前面的已经提到，IP地址的是一个32位的二进制数，为了方便记忆和读写，常用点分十进制的方法来表示IP地址。IP地址中包含了网络号和主机号，可能还包含有子网号，为了能正确的从IP地址中获取网络号、主机号、子网号，还需要有子网掩码的辅助。本小结简要介绍IP的点分十进制表示方法，网络号、主机号、子网号和子网掩码的含义。</p><h3 id="2-2-1-IP地址的点分十进制表示方法"><a href="#2-2-1-IP地址的点分十进制表示方法" class="headerlink" title="2.2.1 IP地址的点分十进制表示方法"></a>2.2.1 IP地址的点分十进制表示方法</h3><p>&emsp;&emsp;为了方便记忆和表述，将32位的IP地址分为4个字节，将每个字节都以十进制表示，在四个字节转换得到的十进制数中间分别加一个点用以区分，这就是我们常见的IP地址的形式。</p><p>&emsp;&emsp;比如面这个IP地址(11000000101010000000000100000001)<sub>2</sub>，直接用二进制表示显得很长，也很难记忆，直接写成10进制数是（3,232,235,777）<sub>10</sub>，写成16进制数是（0xC0A8 0101），都比较难以记忆，而用点分十进制表示方法则可以写成“192.160.1.1”，显然是一个我们经常会接触到的一个IP地址。由此可见，点分十进制表示方法，在日常使用中是非常方便的。</p><h3 id="2-2-2-网络号、主机号和子网号"><a href="#2-2-2-网络号、主机号和子网号" class="headerlink" title="2.2.2 网络号、主机号和子网号"></a>2.2.2 网络号、主机号和子网号</h3><p>&emsp;&emsp;简单的讲，互联网是把一个个小的网络链接起来组成一个庞大的网络，因此要找到一个IP地址，首先要找到这个IP地址处于哪个小的网络中，然后再找到这个IP对应于这个网络中的哪一台主机。因此IP地址就分成了网络号和主机号两个部分。实际上，根据网络号找到一个网络后，这个网络可能会划分成几个更小的网络组成的，也就是说我们还需要再找到该IP属于这个网络的哪一个子网，然后才能找到这台主机。而要找到IP属于哪一个子网，自然也就需要一个子网号。因为不是所有的网络都会划分子网，因此并不是所有的IP地址都包含子网号的。</p><h3 id="2-2-3-IP地址的分类"><a href="#2-2-3-IP地址的分类" class="headerlink" title="2.2.3 IP地址的分类"></a>2.2.3 IP地址的分类</h3><p>&emsp;&emsp;前文提到了IP地址包含了网络号、主机号，可能还有子网号，那么如果我们已知一个IP地址，如何确定这个IP是否含有子网号，它的网络号、子网号（如果有）、主机号分别是什么呢？</p><p>&emsp;&emsp;要解决这个问题，首先要了解IP地址的分类：A类地址、B类地址和C类地址。A类地址的前8位表示网络号，并且其最高位恒位0，因此其高8位转换成十进制的范围是1~126<sup>[2]</sup>，如果用点分十进制的方式表示IP地址，那么A类IP地址的第一段应该在1到126中间；B类地址的前16位表示网络号，其最高l两位恒为(10)<sub>2</sub>，其高8位转换成10进制的范围是128~191；C类地址的前24位表示网络号，其最高三位恒为（110）<sub>2</sub>，高8位转换位10进制的范围是192~223。</p><p>&emsp;&emsp;根据上述规则，就可以确定一个给定IP地址的网络号。</p><h3 id="2-2-4-子网掩码"><a href="#2-2-4-子网掩码" class="headerlink" title="2.2.4 子网掩码"></a>2.2.4 子网掩码</h3><p>&emsp;&emsp;确定一个IP地址的网络号后，还需要确定其子网号和主机号。前文叙述中，有时会把子网号放在主机号之后，这是因为子网号并不总是存在，但在IP地址中的顺序实际上是网络号、子网号（如果有）、主机号。确定网络号后，必须先确定该IP是否含有子网号，子网号是多少（如果有），然后才能获取主机号。</p><p>&emsp;&emsp;要确定IP中的子网号，就需要子网掩码的辅助了。子网掩码也是一个32位的二进制数，并且通常也以点分十进制的方式表示，这一点与IP地址类似。其作用是告诉主机IP地址中有多少位是用来表示子网号的（实际上是告诉主机IP地址中网络号和子网号加起来有多少位），子网掩码中值位1的比特留给网络号和子网号，值为0的比特留给主机号。由于已知网络号的位数，通过子网掩码可以知道网络号和子网号的总位数，自然也就能区分出IP地址中的网络号、子网号和主机号了。</p><p>&emsp;&emsp;以上文提到的IP地址“192.168.1.1”为例，假设其子网掩码为“255.255.255.0”。首先根据第一段的值“192”可以确定该IP地址属于C类IP，有24位表示网络号，其网络号位“192.168.1”。子网掩码的高24位为1，低8位为0，说明网络号和子网号加起来共计24位，也就是说这里没有进行子网划分，那么其主机号就是“1”。</p><p>&emsp;&emsp;因为IP地址总是按网络号、子网号、主机号排列的，不难理解子网掩码的一个特征：高位是连续的1，低位是连续的0。在Lwip的实现中，“ip4_aaddr.c”中有一个检验子网掩码合法性的函数<code>ip4_addr_netmask_valid</code>，就是利用这个特征，对于一个待检验的数，从最高位起，找到第一个0，然后再检查第一个0后面还有没有1，如果没有，说明待检验数是一个合法的子网掩码。</p><h1 id="3-IP相关功能在-Lwip-中的实现"><a href="#3-IP相关功能在-Lwip-中的实现" class="headerlink" title="3. IP相关功能在 Lwip 中的实现"></a>3. IP相关功能在 Lwip 中的实现</h1><h2 id="3-1-ip-hdr结构体简介"><a href="#3-1-ip-hdr结构体简介" class="headerlink" title="3.1 ip_hdr结构体简介"></a>3.1 ip_hdr结构体简介</h2><p>&emsp;&emsp;ip_hdr结构体就是IP首部的结构体，其定义如下：</p><pre><code class="c">struct ip_hdr {  PACK_STRUCT_FLD_8(u8_t _v_hl);  PACK_STRUCT_FLD_8(u8_t _tos);  PACK_STRUCT_FIELD(u16_t _len);  PACK_STRUCT_FIELD(u16_t _id);  PACK_STRUCT_FIELD(u16_t _offset);  PACK_STRUCT_FLD_8(u8_t _ttl);  PACK_STRUCT_FLD_8(u8_t _proto);  PACK_STRUCT_FIELD(u16_t _chksum);  PACK_STRUCT_FLD_S(ip4_addr_p_t src);  PACK_STRUCT_FLD_S(ip4_addr_p_t dest);} PACK_STRUCT_STRUCT;PACK_STRUCT_END</code></pre><p>&emsp;&emsp;在源代码中包含了对每个元素的注释，结合注释和IP首部的格式，不难理解各元素所代表的的意义。需要注意的一点是，IP首部并不都是按字节定义数据的含义的，但是在<code>ip_hdr</code>结构体中，对部分字段进行了合并，方便了结构体定义。IP首部的版本和首部长度两个字段，其长度都是4位，并且位置相邻，因此在<code>ip_hdr</code>结构体总将这两个字段合并在一起，定义了一个8位的变量<code>_v_hl</code>，其中的”v”便是version，”hl”即head lenth。IP首部的3位标志字段和13位的片偏移字段则合并成一个16位的变量<code>_offset</code>。剩余变量则都与IP首部的字段一一对应，小伙伴们可自行翻阅源码，并对照IP数据报格式自行理解。</p><p>&emsp;&emsp;从结构体定义来看，结构体中并没有可选项相关的元素，但这并不意味着Lwip没有支持可选项的能力。</p><h2 id="3-2-Lwip中IP层数据发送流程简介"><a href="#3-2-Lwip中IP层数据发送流程简介" class="headerlink" title="3.2 Lwip中IP层数据发送流程简介"></a>3.2 Lwip中IP层数据发送流程简介</h2><p>&emsp;&emsp;Lwip中，IP层对发送数据的处理依次经过了<code>ip4_output</code>、<code>ip4_output_if</code>、<code>ip4_output_if_opt</code>、<code>ip4_output_if_opt_src</code>四个函数。<code>ip4_output</code>函数中，根据目的IP地址确定了该IP数据报的发送路径（即通过哪个网卡发送该数据报），并将传入的数据和网卡信息传递给函数<code>ip4_output_if</code>。在当前定义中，函数<code>ip4_output_if</code>没有做任何操作，直接将数据传送给函数<code>ip4_output_if_opt</code>，<code>ip4_output_if_opt</code>比<code>ip4_output_if</code>多出的两个形参<code>void *ip_options</code>和<code>u16_t optlen</code>分别传入了实参空指针和0。函数<code>ip4_output_if_opt</code>中根据选定的网卡确定了源地址，然后再次将所有数据传递给函数<code>ip4_output_if_opt_src</code>。函数<code>ip4_output_if_opt_src</code>根据传入的信息，完成IP报文首部的填充，然后调用网卡的发送函数，将IP数据报交由链路层处理。每个函数的具体实现，请小伙伴们自行阅读源码。</p><p>&emsp;&emsp;接下来讨论下Lwip对IP首部可选项的处理。首先可以确定的是，Lwip是有处理可选项的能力的，前面提到<code>ip4_output_if_opt</code>比<code>ip4_output_if</code>多出两个形参，这连个形参实际上就是指可选项的内容和长度，在传入实参时直接传入了空指针和0，也就是说所有以函数<code>ip4_output</code>为处理起点的IP数据报，都是没有可选项的。如果想要发送一个首部含有可选项的IP数据报，则上层协议需要调用函数<code>ip4_output_if_opt</code>，而以该函数位处理起点的IP数据报，就跳过了查找发送路径这一功能。在源码”ip4.h”中，有一句注释“Currently, the function ip_output_if_opt() is only used with IGMP ”，据此推测，只有IGMP协议在发送IP数据报时调用的是函数<code>ip4_output_if_opt</code>，而其他协议则调用<code>ip4_output</code>函数，至于该推测是否准确，需要分析上层协议的源码，本文不再进一步扩展。</p><p>&emsp;&emsp;首部检验和的计算方法。关于首部检验和的计算方法，不同的参考资料中描述有所不同。也许是因为协议发展过程中有所改变，也许是有些书籍中出现了谬误，也许是这些不同的描述本质上是一样的（这设计到比较深奥的数学知识，已经超出了我的能力范畴），因此吧检验的介绍放到源码分析的部分来讲解，结合代码中的实际操作，确保给小伙伴们呈现除一个正确的计算方法。首部检验和的计算，属于IP首部填充的一部分，其源码实现包含在<code>ip4_output_if_opt_src</code>中。计算的方法是，定义一个32位的变量<code>chk_sum</code>并初始化为0，然后将IP首部的内容按16位字相加，注意此处IP首部的检验和字段本身无需参与运算，然后将得到的结果进行如下处理：</p><pre><code class="c">chk_sum = (chk_sum &gt;&gt; 16) + (chk_sum &amp; 0xFFFF);chk_sum = (chk_sum &gt;&gt; 16) + chk_sum;chk_sum = ~chk_sum;</code></pre><p>最终得到的结果即为检验和，将其填入检验和字段即可。</p><h2 id="3-3-Lwip中接收数据处理简介"><a href="#3-3-Lwip中接收数据处理简介" class="headerlink" title="3.3 Lwip中接收数据处理简介"></a>3.3 Lwip中接收数据处理简介</h2><p>&emsp;&emsp;Lwip中IP层处理接收数据的函数是<code>ip4_input</code>。该函数首先对IP数据报的合法性进行检查，包括IP版本、检验和、长度等信息的检查，然后判断IP数据报是否确实是却要本机接收的，如果满足以上条件，则根据IP首部中的协议字段，将IP数据报转发给对应的上层协议进行处理。</p><h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4 参考资料"></a>4 参考资料</h1><ol><li>RT-TREAD Lwip组件v2.0.2源码；</li><li>《TCP-IP详解卷一：协议》；</li><li>《TCP/IP路由技术（第一卷）（第二版）》。</li></ol><blockquote><p>  [1] ICMP 和 IGMP 与IP同样属于网络层，但是因为其数据也需要以IP数据报的格式传输，所以也可以看做是IP的上层协议。<br>  [2] 网络号不能为全0或全1。</p></blockquote></body>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RT-THREAD </tag>
            
            <tag> LWIP </tag>
            
            <tag> IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora 图片自动上传与免费图床</title>
      <link href="2021/06/17/2021-06-17-Typora-%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E4%B8%8E%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
      <url>2021/06/17/2021-06-17-Typora-%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E4%B8%8E%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;之前写过一个基于Gitee搭建免费图床的教程，但是每个图片都需要使用Git命令或者使用Git相关的可视化工具进行上传，使用起来并不是很方便。Typora 是当下比较火的一款Markdown写作工具，其图片自动上传功能为更方便的使用图床提供了可能。</p><body><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>&emsp;&emsp;之前的教程里讲述了基于Gitee搭建免费图床的方法，因为一些众所周知的原因，Github的访问速度比较受限，所以当时想到了在Gitee上搭建图床。但是因为需要手动上传每张图片，还无法快捷的获取图片调用链接，操作并不方便，因此更多的还是使用 PicGo + Github 的方式搭建图床。至于 PicGo + Github 搭建图床的教程网上很多，此处不多赘述。但是最近因为电脑重装系统，重新安装和配置了 PicGo， 出现了图片上传失败的问题。不清楚是自己配置有误还是什么其他原因，因此再一次产生了研究 Typora 图片自动上传功能的想法。没错，这并不是我第一次研究这个功能，但是第一次尝试以失败告终，这一次经过一个晚上的反复尝试，终于如愿以偿。因为访问速度的原因，这里仍然以 Gitee 举例说明，该方法同样适用于 Github ，感兴趣的小伙伴可以自己尝试举一反三或与我交流。</p><h1 id="Typora-自动上传功能配置"><a href="#Typora-自动上传功能配置" class="headerlink" title="Typora 自动上传功能配置"></a>Typora 自动上传功能配置</h1><p>  打开 Typora 编辑器，依次选择<code>文件-&gt;偏好设置-&gt;图像</code>，如下图所示进行配置：</p><center><img src=http://gitee.com/hekuzhengfeng/pictures/raw/master/pic/Snipaste_2021-06-17_23-19-53.png></center><p>选择插入图片时上传图片，勾选对本地位置的图片应用上述规则，上传服务选择<code>Custom Command</code>。也可以选择PicGo（app）或者Picgo-Core（command line），但是因为楼主PicGo趴窝了，所以这里选择自定义命令。感兴趣的同学可以尝试下其他选项。</p><p>&emsp;&emsp;这里说明一下自定义命令，命令的含义是调用“D:\picture\pictures\”文件夹下一个名为“giteeupload.bat”的批处理文件，楼主把该批处理文件也放到了图床所用的仓库里。</p><h1 id="创建批处理文件"><a href="#创建批处理文件" class="headerlink" title="创建批处理文件"></a>创建批处理文件</h1><p>&emsp;&emsp;不知道什么是批处理文件的请自行找某度获取答案，创建方式是直接新建文本文件，然后直接改名为 “xx.bat” 即可，需要注意要把文件的扩展名改为“.bat”，电脑设置了不显示扩展名的小伙伴要注意扩展名是否正确。一般情况下修改扩展名会有一个提示是否修改扩展名的弹窗，选择确定即可，如果没看到这个弹窗，大概率是没有修改扩展名。</p><p>&emsp;&emsp;话不多说，上代码：</p><pre><code class="bat">@echo offecho %0set i=0echo Upload Success:::图片调用地址头部set head=http://gitee.com/username/reponame/raw/branchname/path/:loopif [%1]==[] goto endset source=%~f1::echo %source%set name=%~nx1::图床本地仓库存放图片的路径set path=D:\picture\pictures\pic\set aim=%path%%name%copy %source% %aim% &gt;nulset ul=%head%%name%echo %ul%shiftset/a i=%i%+1goto loop:end::下一行中路径改为图床本地仓库的根目录cd /d D:\picture\pictures::后面几行中&quot;C:\Program Files\Git\cmd\git&quot;修改为git.exe的完整路径，注意不要加“”.exe”&quot;C:\Program Files\Git\cmd\git&quot; add .&quot;C:\Program Files\Git\cmd\git&quot; commit -m &quot;add picture(s) %date:~0,10% %time%&quot;&quot;C:\Program Files\Git\cmd\git&quot; push origin master&quot;C:\Program Files\Git\cmd\git&quot; status</code></pre><p>&emsp;&emsp;将上述代码粘贴到刚刚创建的 <code>.bat</code>文件中，根据注释稍作修改即可使用。修改点如下：</p><ol><li><code>set head=http://gitee.com/username/reponame/raw/branchname/path/</code>中，username修改为自己在Gitee的用户名，reponame 修改为图床的仓库名称，branchname 修改为图床在仓库中的分支，通常默认为master，path 修改为图片在图床仓库中的路径，如在根目录下则直接删除“path/”；</li><li><code>set path=D:\picture\pictures\pic\</code>中，将“D:\picture\pictures\pic\” 修改为图床本地仓库中存放图片的路径；</li><li><code>cd /d D:\picture\pictures</code>中，将 “D:\picture\pictures” 修改为图床本地仓库的根目录路径；</li><li>最后几行中 “C:\Program Files\Git\cmd\git” 修改为 “git.exe” 的完整路径，注意本例中 “git.exe” 在 “C:\Program Files\Git\cmd” 路径下；</li><li><code>&quot;C:\Program Files\Git\cmd\git&quot; commit -m &quot;add picture(s) %date:~0,10% %time%&quot;</code>中， “-m” 后面的内容为提交信息，可以自行修改，也可以直接使用。</li></ol><p>最后要注意的是批处理文件的文件名要与 Typora 中自定义命令的配置相对应。</p><h1 id="功能验证"><a href="#功能验证" class="headerlink" title="功能验证"></a>功能验证</h1><p>&emsp;&emsp;至此，Typora 图片自动上传功能已经配置完成，点击 <code>验证图片上传选项</code> 按钮，j经过短暂的运行，如果能成功上传，则会提示“成功上传图片并获得新的URL”，如下图所示：</p><center><img src=http://gitee.com/hekuzhengfeng/pictures/raw/master/pic/Snipaste_2021-06-17_23-57-43.png></center><h1 id="使用自动上传功能"><a href="#使用自动上传功能" class="headerlink" title="使用自动上传功能"></a>使用自动上传功能</h1><p>&emsp;&emsp;需要插入图片时，依次点击<code>格式-&gt;图像-&gt;插入本地图片...</code>然后在弹出窗口中选择想要插入的图片，稍等几秒中，图片就会上传到 Gitee 的服务器中，并以 Markdown 的格式插入服务器上的图片。</p><p>&emsp;&emsp;目前该功能还不适用于插入剪切板中的图片。对于网站的图片是否有效目前也还没有验证，有兴趣的小伙伴可以尝试看看。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>&emsp;&emsp;教程到这里就结束了，希望这篇教程能给小伙伴们带来便利，有疑问的小伙伴欢迎留言讨论，有不足之处也欢迎大家批评指正。</p></body>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread文件系统组件在STM32H743上的应用</title>
      <link href="2021/05/31/RT-Thread%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6%E5%9C%A8STM32H743%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>2021/05/31/RT-Thread%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%BB%84%E4%BB%B6%E5%9C%A8STM32H743%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>RT-Thread（后文简称RT）提供的DFS组件、Fatfs组件和SDIO驱动组合起来可用于操作SD卡，但RT的底层驱动目前对STM32H743（后文简称H743）适配不是很好，在stm32h743上移植RT时，包括SDIO在内的多个设备驱动都无法直接编译通过。且当前官方论坛中关于在H743上应用RT的相关的帖子也比较少，因此在本次使用SD卡挂载文件系统时，因为底层驱动不适配，遇到了很多问题，也尝试了很多办法，最后通过<strong>重写块设备部分的代码</strong>实现了文件系统的挂载。</p><body><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><p>主控芯片：stm32h743iit6</p><p>硬件平台：自行制作的单板</p><p>RT-Thread版本：4.0.2</p><p>开发工具：RT-Thread Studio (Version: 2.0.0)（后文简称RT-Studio）</p><p>​        STM32CubeMX（Version: 6.0.1）</p><p>​        STM32CubeIDE（Version: 1.5.1）</p><p>存储设备：SD卡</p><h1 id="RT虚拟文件系统简介"><a href="#RT虚拟文件系统简介" class="headerlink" title="RT虚拟文件系统简介"></a>RT虚拟文件系统简介</h1><p>详细内容参看<a href="https://www.rt-thread.org/document/site/programming-manual/filesystem/filesystem/#dfs" target="_blank" rel="noopener">RT官方文档</a>。</p><p>RT虚拟文件系统层次架构如下图所示。</p><center><img src="https://raw.githubusercontent.com/hekuzhengfeng/pictures/master/img20200001.png" height = 70% width = 70%/></center><p>DFS是RT提供的虚拟文件系统组件，该组件为应用程序提供方便的文件操作接口，并支持多种文件系统和存储设备。本文采用的文件系统是FatFS，主要是因为FatFS可以兼容微软的FAT格式，基于该文件系统将文件写入到SD卡后，SD内容可以直接被windows系统识别。</p><p>由于底层驱动不适配的问题，本文基于ST的HAL库重写了块设备相关代码，最终实现了文件系统的功能。</p><h1 id="基于RT-Studio的配置"><a href="#基于RT-Studio的配置" class="headerlink" title="基于RT-Studio的配置"></a>基于RT-Studio的配置</h1><p>在RT-Studio中新建工程及其他功能的实现此处不再详述，首先介配置DFS组件和FatFS组件。如下图所示：</p><center><img src="https://raw.githubusercontent.com/hekuzhengfeng/pictures/master/img20210225155935.png" height=70% width=70%/></center><p>点亮DFS组件和Fatfs组件。可能需要libc组件的支持，这点没有做过验证。其他组件与文件系统本身无关，此处不详细介绍。</p><center><img src="https://raw.githubusercontent.com/hekuzhengfeng/pictures/master/img20210225160534.png" height=70% width=70%/></center><p>按上图所示进行配置，DFS可以加载多种文件系统，但此处只使用了FatFs文件系统。</p><h1 id="重写块设备相关代码"><a href="#重写块设备相关代码" class="headerlink" title="重写块设备相关代码"></a>重写块设备相关代码</h1><h2 id="重写块设备代码的原因"><a href="#重写块设备代码的原因" class="headerlink" title="重写块设备代码的原因"></a>重写块设备代码的原因</h2><p>之所以要重新块设备相关代码，主要原因有二：一个是本文已经反复提到的底层驱动不适配的问题，另一个是RT原有的SD Card设备类<code>mcsd_blk_device</code>较为复杂，包含了多个子类，需要研究多个类型及相关函数才能完成实例化，比较困难。</p><p><code>mcsd_blk_device</code>的定义如下：</p><pre><code class="c">struct mmcsd_blk_device{    struct rt_mmcsd_card *card;    rt_list_t list;    struct rt_device dev;    struct dfs_partition part;    struct rt_device_blk_geometry geometry;    rt_size_t max_req_size;};</code></pre><h2 id="生成SDMMC初始化代码"><a href="#生成SDMMC初始化代码" class="headerlink" title="生成SDMMC初始化代码"></a>生成SDMMC初始化代码</h2><p>使用STM32CubeMX创建项目，配置SDMMC1为SD 4 bit Wide bus模式。配置如下图：</p><center><img src="https://raw.githubusercontent.com/hekuzhengfeng/pictures/master/img20210225171354.png" height=70% width=70%/>    </center><p>时钟配置此处不做展示，项目中时钟源选择PLL1Q，频率为400MHz。配置完成后生成代码备用。</p><h2 id="在RT中初始化并注册块设备"><a href="#在RT中初始化并注册块设备" class="headerlink" title="在RT中初始化并注册块设备"></a>在RT中初始化并注册块设备</h2><pre><code class="c">struct rt_device{    struct rt_object          parent;                   /**&lt; inherit from rt_object */    enum rt_device_class_type type;                     /**&lt; device type */    rt_uint16_t               flag;                     /**&lt; device flag */    rt_uint16_t               open_flag;                /**&lt; device open flag */    rt_uint8_t                ref_count;                /**&lt; reference count */    rt_uint8_t                device_id;                /**&lt; 0 - 255 */    /* device call back */    rt_err_t (*rx_indicate)(rt_device_t dev, rt_size_t size);    rt_err_t (*tx_complete)(rt_device_t dev, void *buffer);#ifdef RT_USING_DEVICE_OPS    const struct rt_device_ops *ops;#else    /* common device interface */    rt_err_t  (*init)   (rt_device_t dev);    rt_err_t  (*open)   (rt_device_t dev, rt_uint16_t oflag);    rt_err_t  (*close)  (rt_device_t dev);    rt_size_t (*read)   (rt_device_t dev, rt_off_t pos, void *buffer, rt_size_t size);    rt_size_t (*write)  (rt_device_t dev, rt_off_t pos, const void *buffer, rt_size_t size);    rt_err_t  (*control)(rt_device_t dev, int cmd, void *args);#endif#if defined(RT_USING_POSIX)    const struct dfs_file_ops *fops;    struct rt_wqueue wait_queue;#endif    void                     *user_data;                /**&lt; device private data */};</code></pre><p>块设备的类型定义如上，其中<code>RT_USING_DEVICE_OPS</code>和<code>RT_USING_POSIX</code>未被定义。</p><p>下文是初始化和注册块设备的代码。首先创建块设备<code>device_sd0</code>，然后初始<code>device_sd0</code>的几个成员函数，初始化MCU的SDMMC1外设并将块设备注册到系统中。</p><pre><code class="c">int sdInit(void){    rt_device_t device_sd0;    SD_HandleTypeDef *hsd1;    //创建一个系统块设备对象    device_sd0 = rt_device_create(RT_Device_Class_Block, sizeof(SD_HandleTypeDef));    //手动设置块设备对象的函数指针    device_sd0-&gt;init = sdmmcInit;//初始化函数指针    device_sd0-&gt;open = sdmmcOpen;    device_sd0-&gt;close = sdmmcClose;    device_sd0-&gt;read = sdmmcRead;    device_sd0-&gt;write = sdmmcWrite;    device_sd0-&gt;control = sdmmcControl;    //将SDMMC1的控制块存定义到块设备的user data中    device_sd0-&gt;user_data = &amp;(device_sd0-&gt;user_data) + 1;    hsd1 = (SD_HandleTypeDef *)device_sd0-&gt;user_data;    rt_memset(hsd1, 0, sizeof(SD_HandleTypeDef));    //将device_sd0注册到系统中，设备名为sd0    rt_device_register(device_sd0, &quot;sd0&quot;, RT_DEVICE_FLAG_RDWR);    //初始化SDMMC1    hsd1-&gt;Instance = SDMMC1;    hsd1-&gt;Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;    hsd1-&gt;Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;    hsd1-&gt;Init.BusWide = SDMMC_BUS_WIDE_4B;    hsd1-&gt;Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;    hsd1-&gt;Init.ClockDiv = 8;    if (HAL_SD_Init(hsd1) != HAL_OK)    {        return RT_ERROR;    }    return RT_EOK;}//注册初始化函数，参考官方文档自动初始化相关内容INIT_DEVICE_EXPORT(sdInit);</code></pre><p>使用HAL库初始化外设需要一个控制块（即<code>SD_HandleTypeDef</code>类型的一个实例），在创建块设备对象时，已预留了空间用于存储控制块。其原理如下：</p><ol><li>函数<code>rt_device_create</code>中有为块设备申请内存的操作，计算所需内存大小时在块设备类型的基础上增加了作为参数传入的SDMMC1控制块所需的内存大小；</li><li>将块设备最后一个成员<code>void * user_data</code>指向预留的空间，及<code>user_data</code>的下一个地址；</li><li>将指针<code>hsd1</code>也指向预留的空间（方便操作）；</li><li>此时已完成将SDMMC1控制块定义到块设备user data中的操作。</li></ol><p>初始化外设SDMMC1的代码可直接从上文STM32CubeMX生成的代码中拷贝。此处有几个细节需要注意：</p><ol><li>原来代码中是直接定义了一个SDMMC控制块对象，而在本项目中使用的是指向SDMMC控制块的指针，在调用控制块成员和函数传参时语法不同；</li><li>原来代码中初始化函数<code>HAL_SD_init</code>返回失败时进入一个错误处理函数（默认为死循环），而本项目中改为返回<code>RT_ERROR</code>；</li><li>生成的代码中还有一个函数<code>HAL_SD_MspInit</code>也需要拷贝过来，改函数不需要任何更改，此处不再贴出代码。</li></ol><p>块设备的几个成员函数定义如下，这些函数是文件系统与SD卡之间的桥梁。定义这几个函数的过程比较曲折，画了很多功夫才搞明白每一个函数应该实现什么样的功能，以及函数入参、返回值的意义。但函数的内容并不复杂，此处直接列出源码，不再详细解释。</p><pre><code class="c">rt_err_t sdmmcInit(rt_device_t dev){    return RT_EOK;}rt_err_t sdmmcOpen(rt_device_t dev, rt_uint16_t oflag){    return RT_EOK;}rt_err_t sdmmcClose(rt_device_t dev){    return RT_EOK;}rt_size_t sdmmcRead(rt_device_t dev, rt_off_t pos, void *buffer, rt_size_t size){    if (HAL_SD_ReadBlocks((SD_HandleTypeDef *)dev-&gt;user_data, (uint8_t *)buffer, pos, size, 5000) != HAL_OK)    {        return 0;    }    return size;}rt_size_t sdmmcWrite(rt_device_t dev, rt_off_t pos, const void *buffer, rt_size_t size){    if (HAL_SD_WriteBlocks((SD_HandleTypeDef *)dev-&gt;user_data, (uint8_t *)buffer, pos, size, 5000) != HAL_OK)    {        return 0;    }    return size;}rt_err_t sdmmcControl(rt_device_t dev, int cmd, void *args){    struct rt_device_blk_geometry info;    switch (cmd)    {    case RT_DEVICE_CTRL_BLK_GETGEOME:        info.sector_count = ((SD_HandleTypeDef *)dev-&gt;user_data)-&gt;SdCard.LogBlockNbr;        info.bytes_per_sector = ((SD_HandleTypeDef *)dev-&gt;user_data)-&gt;SdCard.LogBlockSize;        info.block_size = ((SD_HandleTypeDef *)dev-&gt;user_data)-&gt;SdCard.LogBlockSize;        rt_memcpy(args, &amp;info, sizeof(struct rt_device_blk_geometry));        break;    default:        break;    }    return RT_EOK;}</code></pre><h2 id="将块设备挂载到文件系统"><a href="#将块设备挂载到文件系统" class="headerlink" title="将块设备挂载到文件系统"></a>将块设备挂载到文件系统</h2><p>经过一番努力，现在已经在系统中注册了块设备”sd0”，DFS组件和FatFS组件会自动初始化，接下来需要将块设备挂载到文件系统中。函数如下：</p><pre><code class="c">int sd_mount(void){    if(rt_device_find(&quot;sd0&quot;) != RT_NULL)    {        if (dfs_mount(&quot;sd0&quot;, &quot;/&quot;, &quot;elm&quot;, 0, 0) == RT_EOK)        {            LOG_I(&quot;sd card mount to &#39;/&#39;&quot;);            return RT_EOK;        }        else        {            LOG_W(&quot;sd card mount to &#39;/&#39; failed!&quot;);        }    }    return RT_ERROR;}INIT_APP_EXPORT(sd_mount);</code></pre><p>更好的挂载文件系统的操作可以参考帖子<a href="https://blog.csdn.net/sinat_31039061/article/details/104145805" target="_blank" rel="noopener">RT-Thread进阶笔记之虚拟文件系统</a>中6.6.4小节的方法创建一个挂载文件系统的线程。本项目中实际上是偷了个懒，挂载文件系统的操作只会尝试一次，因此必须等到DFS、FatFS、块设备都初始化完成后调用该函数才能成功挂载文件系统，所以把该函数注册到自动初始化最晚的“application init functions”中，具体参考官方文档相关章节。</p><h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><p>需要注意的是，在初始化系统时钟时，一定要配置外设SDMMC1的时钟，具体方法这里也不再详细说明。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本项目不仅完成了RT-Thread文件系统组件在stm32h743上的应用，实际上也为RT-Thread其他设备驱动不适配stm32h743的问题提供了一个解决问题的思路。</p><p>由于本人能力有限，代码中可能存在诸多问题或bug，欢迎大家批评指正。</p></body>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stm32h743 </tag>
            
            <tag> stm32 </tag>
            
            <tag> SD Card </tag>
            
            <tag> RT-Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Database-Library管理Altium-Designer库文件</title>
      <link href="2020/09/14/%E5%9F%BA%E4%BA%8EDatabase-Library%E7%AE%A1%E7%90%86Altium-Designer%E5%BA%93%E6%96%87%E4%BB%B6/"/>
      <url>2020/09/14/%E5%9F%BA%E4%BA%8EDatabase-Library%E7%AE%A1%E7%90%86Altium-Designer%E5%BA%93%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<body><h1 id="基于Database-Library"><a href="#基于Database-Library" class="headerlink" title="基于Database-Library"></a>基于Database-Library</h1><h1 id="管理Altium-Designer库文件"><a href="#管理Altium-Designer库文件" class="headerlink" title="管理Altium-Designer库文件"></a>管理Altium-Designer库文件</h1><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>&emsp;&emsp;Altium Designer（以下简称AD）是一个常用的PCB设计软件，其原件库包含的文件格式主要包含.LibPkg（库工程）、.PcbLib（封装库）、.SchLib（符号库）和.IntLib（集成库）四种。</p><p>&emsp;&emsp;Git 是一款强大的版本管理工具，在版本管理和团队合作中应用git能带来极大的效率提升。</p><p>&emsp;&emsp;然而，AD原件库所需的四种文件均为二进制文件，而git无法对二进制文件进行merge等操作，在团队合作中，维护原件库十分困难。虽然Altium提供了相关的工具对原件进行管理，但是价格昂贵。经过多次尝试，终于找到一种能在git仓库中较为方便的管理AD原件库的形式——Database Library。</p><p>&emsp;&emsp;Database library是另外一种原件库的组织形式，在Database Library中，每一个原理图符号或封装，都对应一个独立的.SchLib或.PcbLib文件，通过数据库文件或excel表格记录原理图符号和封装的对应关系。虽然符号库和封装库文件仍然是二进制文件，但在库中新增器件的操作体现为新增符号库文件、新增封装库文件和修改excel文件。虽然.xlsx文件也是二进制文件，但在DAtabase Library中，.xlsx文件可以另存为.csv文件而不丢失信息，.csv文件本质上是文本文件，不影响git的使用。</p><p>&emsp;&emsp;综上所述，改用 Database Library 可以方便原件库的管理，有效提高研发效率。</p><h2 id="二、Database-Library-的安装"><a href="#二、Database-Library-的安装" class="headerlink" title="二、Database Library 的安装"></a>二、Database Library 的安装</h2><p>&emsp;&emsp;如下图所示是一个Database Library的示例：</p><p><img src="https://gitee.com/hekuzhengfeng/pictures/raw/master/pic/Snipaste_2020-07-08_23-30-51.png" alt=""></p><p>其中”FootPrints”文件夹下为封装库文件，”Symbols”文件夹下为符号库文件，”History”文件夹是AD的历史文件，由AD自动生成。<strong>符号库文件夹和封装库文件夹的区分是为了方便管理，并非Database Library本身的强制要求。</strong>“.xlsx”和”.csv”文件包含了符号库与封装库的对应信息。<strong>Database Library从.xlsx文件中获取符号库和封装库的对应信息，.csv文件内容与.xlsx文件相同，但.csv是文本格式的文件，Git下可以进行merge操作，尤其是涉及到多人合作时，给版本管理带来很大便利。需要基于Git进行版本管理时，只需跟踪.csv文件，在需要时将.csv文件另存为.xlsx格式即可。</strong>“.DbLib”文件即为AD 的 Database Library文件。</p><p>&emsp;&emsp;用记事本(notepad++)方式打开”.DbLib”文件，文件内容如下图：</p><p><img src="http://192.168.0.114/huangqingbo/pictures/raw/master/img/Snipaste_2020-07-08_23-47-56.png" alt=""></p><p><img src="http://192.168.0.114/huangqingbo/pictures/raw/master/img/Snipaste_2020-07-08_23-53-14.png" alt=""></p><p>如图所示，根据仓库在本地的实际存储路径，对”.DbLib”文件进行修改，修改后保存并关闭文件。</p><p>&emsp;&emsp;此时Database Library已经准别就绪，可以在AD中安装并使用了。安装流程及器件调用与其他元件库安装流程相同，选择从文件安装然后找到对应的”.DbLib”文件安装即可。</p><h2 id="三、-Database-Library的使用"><a href="#三、-Database-Library的使用" class="headerlink" title="三、 Database Library的使用"></a>三、 Database Library的使用</h2><p>&emsp;&emsp;Database Library库中的元件条用方式与常用的原理图库、集成库等条用方式基本相同，但需要额外注意多part器件的调用。</p><p>&emsp;&emsp;在传统的原理图库或集成库（以集成库为例）中，调用多part器件，在Librarys窗口中，会以树状图的形式展现出器件有多少个part（如下图所示，点击器件前的小三角即可展开或折叠器件part），直接拖动所需part到原理图中即可。</p><p><img src="https://gitee.com/hekuzhengfeng/pictures/raw/master/pic/Snipaste_2020-07-25_22-54-33.png" alt=""></p><p>&emsp;&emsp;而Database Library不会像传统一样特殊显示多part器件（如下图红框中的器件，是多part器件，但与非多part器件并无区别）。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></body><p>&emsp;&emsp;Altium Designer（以下简称AD）是一个常用且简单易上手的PCB设计软件，使用Database-Library作为AD的原件库，可以在一定程度上克服Git不支持二进制文件的弊端，更加方便地进行版本管理。</p>]]></content>
      
      
      <categories>
          
          <category> Altium Designer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> Altium designer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Gitee搭建免费图床</title>
      <link href="2020/04/25/%E5%9F%BA%E4%BA%8EGitee%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
      <url>2020/04/25/%E5%9F%BA%E4%BA%8EGitee%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>本文简单介绍如何基于Gitee搭建免费图床。</p><body><h1 id="基于Gitee搭建免费图床"><a href="#基于Gitee搭建免费图床" class="headerlink" title="基于Gitee搭建免费图床"></a>基于Gitee搭建免费图床</h1><h2 id="1、为什么要基于Gitee搭建免费图床"><a href="#1、为什么要基于Gitee搭建免费图床" class="headerlink" title="1、为什么要基于Gitee搭建免费图床"></a>1、为什么要基于Gitee搭建免费图床</h2><p>​        简单讲，主要是因为大家熟悉的免费图床各有不足之处。例如：七牛云回收了测试域名，配置自定义域名需要绑定主机（<a href="https://www.cnblogs.com/aflyun/p/10010319.html" target="_blank" rel="noopener">参考：【教程】使用gitee搭建免费图床</a>）；基于 GitHub 的图床访问速度则是硬伤，经常遇到图片加载不出来的问题。</p><h2 id="2、准备工作"><a href="#2、准备工作" class="headerlink" title="2、准备工作"></a>2、准备工作</h2><p>1、一个Gitee账户</p><p>2、配置好SSH</p><p>3、准备好Git环境</p><h2 id="3、搭建图床"><a href="#3、搭建图床" class="headerlink" title="3、搭建图床"></a>3、搭建图床</h2><p>1、在Gitee上新建一个仓库</p><p>​        该步骤是Gitee的常规操作，不再详细介绍，<strong>注意要创建一个公开仓库。</strong></p><p>2、上传图片</p><p>​        使用git将仓库克隆到本地，在仓库中加入需要保存到图床的图片，然后push到Gitee即可。该步骤是Git的常规操作，也不再详细介绍。</p><p>3、使用markdown语法调用图片</p><p>​    调用图片的地址格式如下表所示：</p><style>table th:first-of-type {    width: 50%;}table th:nth-of-type(2) {    width: 15%;}table th:nth-of-type(3) {    width: 15%;}table th:nth-of-type(4) {    width: 20%;}</style><table><thead><tr><th align="center">仓库地址</th><th align="center">固定格式</th><th align="center">分支名</th><th align="center">路径及文件名</th></tr></thead><tbody><tr><td align="center">http：//gitee.com/hekuzhengfeng/pictures/</td><td align="center">raw/</td><td align="center">master/</td><td align="center">pic/hekuzhengfeng.png</td></tr></tbody></table><p>​        如下示例，图片存放在pictures仓库中，master分支下的pic文件夹下，图片文件名为test.png，调用图片的地址为：<a href="http://gitee.com/hekuzhengfeng/pictures/raw/master/pic/hekuzhengfeng.png" target="_blank" rel="noopener">http://gitee.com/hekuzhengfeng/pictures/raw/master/pic/hekuzhengfeng.png</a></p><p><cneter><img src="http://gitee.com/hekuzhengfeng/pictures/raw/master/pic/hekuzhengfeng.png" /></center></p><p>​        </p><h2 id="4、为什么有这篇教程"><a href="#4、为什么有这篇教程" class="headerlink" title="4、为什么有这篇教程"></a>4、为什么有这篇教程</h2><p>​        第一节中已经链接了一篇基于gitee搭建图床的教程，但是链接中的教程使用了gitee的Pages服务，这样可以搭建一个可视化的图床，但实测每次添加图片（或者其他操作如更改图片名称等）均需要重新进行部署（不排除自己操作有问题）。Gitee Pages可以在提交（push）后自动部署，但该功能需要付费。而本文种介绍的方法则直接push后即可调用图片，无须手动重新部署。</p></body>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Source Insight 搭建Python 环境</title>
      <link href="2020/04/07/Source%20Insight%20%E6%90%AD%E5%BB%BAPython%20%E7%8E%AF%E5%A2%83/"/>
      <url>2020/04/07/Source%20Insight%20%E6%90%AD%E5%BB%BAPython%20%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="Source-Insight-搭建Python-环境"><a href="#Source-Insight-搭建Python-环境" class="headerlink" title="Source Insight 搭建Python 环境"></a>Source Insight 搭建Python 环境</h1><p>SI是一个受到广泛欢迎的代码阅读/编辑器，那么能不能用SI来进行python开发呢，经过一晚上的试验，终于实现了这一功能。</p><body><h1 id="1-python的语法高亮"><a href="#1-python的语法高亮" class="headerlink" title="1.python的语法高亮"></a>1.python的语法高亮</h1><p>source insight 4.0版本已经默认支持python语言的语法高亮，无须另外设置<br>当然可以自行设置主题、字体大小等以符合个人阅读编辑习惯<br>代码编辑区默认显示字符间距很小，不方便阅读，可以尝试按ctrl+F12进行调整</p><p>#2.source insight直接运行python脚本</p><p>操作系统： windows 10<br>python版本： 3.7<br>操作方法如下：<br><img src = "https://raw.githubusercontent.com/hekuzhengfeng/pictures/master/img/20191130230849.png" height = 50% width = 50%/></p><p><strong>在SI中选择tools-&gt;custom commands</strong></p><img src = "https://raw.githubusercontent.com/hekuzhengfeng/pictures/master/img/20191130231129.png" height = 50% width = 50%/><p><strong>add新的命令，设置命令名（例如python)，点击OK</strong><br><strong>然后编辑上一步创建地命令</strong>（此处为py）<br><img src = "https://raw.githubusercontent.com/hekuzhengfeng/pictures/master/img/20191130231903.png" height = 50% width = 50%/><br><strong>其中run 填“python %n;pause”（不包含引号）</strong><br><strong>dir为空</strong><br><strong>勾选Save Files Firs</strong></p><p>此时点击Run即可直接运行python脚本，<strong>还可以点击”Keys”添加快捷键，或者点击”Menu”将命令添加到tools菜单下</strong></p><p>最后祝大家顺利的用Source Insight搭建python环境</p></body>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> source insight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git相关命令记录</title>
      <link href="2020/03/25/git%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
      <url>2020/03/25/git%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="git相关命令记录"><a href="#git相关命令记录" class="headerlink" title="git相关命令记录"></a>git相关命令记录</h1><body><h2 id="SSH-KEY"><a href="#SSH-KEY" class="headerlink" title="SSH_KEY"></a>SSH_KEY</h2><pre><code class="git">ssh-keygen -t rsa -C &quot;your_email@email.com&quot; -f ~/.ssh/custom_rsa</code></pre><p>##git常用命令</p><pre><code class="git">git clonegit pullgit initgit fetch</code></pre><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><pre><code class="git">#查看本地+远程所有分支的全部提交以及关系git log --graph --all#查看本地+远程所有分支的全部提交以及关系gitk --all</code></pre><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><pre><code class="git">#删除远程仓库origin上的分支testgit push origin --delete test</code></pre><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><pre><code class="git">#创建切换一个空分支，但工作区所有文件保持不变git checkout --orphan latest_branch#撤回还未add的文件修改git checkout .</code></pre><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><pre><code class="git">#解决git status无法显示中文问题git config --global core.quotepath false</code></pre></body>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
